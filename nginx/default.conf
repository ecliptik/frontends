#Containers to forward to

upstream nitter {
  server nitter:8082;
}

upstream bibliogram {
  server bibliogram:10407;
}

upstream teddit {
  server teddit:8080;
}

upstream imgin {
  server imgin:8083;
}

upstream scribe {
  server scribe:8084;
}

upstream invidious {
  server invidious:3000;
}

upstream searxng {
  server searxng:8086;
}

#Catchall to display static site
server {
    listen 80;
    listen 443 ssl http2;
    server_name catchall.example.com;
    include /etc/nginx/conf.d/shared.conf;
    location ^~ / {
      root /usr/share/nginx/html/;
    }
    #Redirect http->https
    if ($https = '') { return 301 https://$host$request_uri; }
}

#Nitter
server {
    listen 80;
    listen 443 ssl http2;
    server_name nitter.example.com;
    include /etc/nginx/conf.d/shared.conf;
    proxy_cache_lock on;
    proxy_http_version 1.1;
    proxy_redirect off;
    proxy_set_header Connection "";

    location ^~ / {
      proxy_pass       http://nitter;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
    }
    #Redirect http->https
    if ($https = '') { return 301 https://$host$request_uri; }
}

#Teddit
server {
    listen 80;
    listen 443 ssl http2;
    server_name teddit.example.com;
    include /etc/nginx/conf.d/shared.conf;
    location ^~ / {
      proxy_pass       http://teddit;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
    }
    #Redirect http->https
    if ($https = '') { return 301 https://$host$request_uri; }

}

#Bibliogram
server {
    listen 80;
    listen 443 ssl http2;
    server_name bibliogram.example.com;
    include /etc/nginx/conf.d/shared.conf;
    location ^~ / {
      proxy_pass       http://bibliogram;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
    }
    #Redirect http->https
    if ($https = '') { return 301 https://$host$request_uri; }
}

#Scribe
server {
    listen 80;
    listen 443 ssl http2;
    server_name scribe.example.com;
    include /etc/nginx/conf.d/shared.conf;
    location ^~ / {
      proxy_pass       http://scribe;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
    }
    #Redirect http->https
    if ($https = '') { return 301 https://$host$request_uri; }
}

#Imgin
server {
    listen 80;
    listen 443 ssl http2;
    server_name imgin.example.com;
    include /etc/nginx/conf.d/shared.conf;
    location ^~ / {
      proxy_pass       http://imgin;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
    }
    #Redirect http->https
    if ($https = '') { return 301 https://$host$request_uri; }
}

#invidious
server {
    listen 80;
    listen 443 ssl http2;
    server_name invidious.example.com;
    include /etc/nginx/conf.d/shared.conf;
    location / {
        proxy_pass http://invidious;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;    # so Invidious knows domain
        proxy_http_version 1.1;     # to keep alive
        proxy_set_header Connection ""; # to keep alive
    }
    #Redirect http->https
    if ($https = '') { return 301 https://$host$request_uri; }
}

#Searxng
server {
    listen 80;
    listen 443 ssl http2;
    server_name search.example.com;
    include /etc/nginx/conf.d/shared.conf;
    location ^~ / {
      proxy_pass       http://searxng;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
    }

    #Redirect http->https
    if ($https = '') { return 301 https://$host$request_uri; }
}
